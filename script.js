//could refactor so that there's one graph, generated by input of what you want to see (i.e. 'pitchers' or 'hitters')//
$(document).on('ready',function(){
var width = parseFloat(d3.select('.eight.columns').style('width'));
var height = 500, margins = {left:50,right:50,top:20,bottom:20};
var hitDiv = d3.select('#hitting');
var pitchDiv = d3.select('#pitching');
var hitSvg = hitDiv.select('.svgContain').append('svg').attr('height',height).attr('width',width);
// var hitSvg2 = hitDiv.select('.svgContain').append('svg').attr('height',height).attr('width',width);
var pitchSvg = pitchDiv.select('.svgContain').append('svg').attr('height',height).attr('width',width);

var hitData = [];
var pitchData = [];

var hitTip = hitSvg.append("g").style('visibility','hidden');
hitTip.append('line')
  .attr('x1',0).attr('x2',0)
  .style('stroke-width',2).style('stroke','black');
hitTip.append('circle').attr('r',15).attr('fill','white');//.style('visibility','hidden');
hitTip.append('text').attr('text-anchor','middle').attr('dy',7.5);

var pitchTip = pitchSvg.append('circle').attr('r',5).attr('fill','red').style('visibility','hidden');

for (var i=0;i<10;i++){
  d3.csv('hitters/player'+i+'.csv')
    .row(function(d) {
      return {
        player:d.Player,year:+d.Year,hits:+d.H,doubles:+d['2B'],triples:+d['3B'],RBI:+d.RBI,HR:+d.HR,runs:+d.R,
        TB:+d.TB,AB:+d.AB,slug:+d.SLG,BA:+d.BA,BB:+d.BB,IBB:+d.IBB,SB:+d.SB,CS:+d.CS,K:+d.SO,G:+d.G,OPS:+d.OPS
      }
    })
    .get(function(error, rows) {
      var cumulative = JSON.parse(JSON.stringify(rows));
      var playerData = {seasonal:rows,cumulative:cumulative};
      hitData.push(playerData);
      if (hitData.length === 10){
        makeHitters();
      }
    })

  d3.csv('pitchers/player'+i+'.csv')
    .row(function(d) {
      return {
        player:d.Player,year:+d.Year,wins:+d.W,losses:+d.L,ERA:+d.ERA,hits:+d.H,IP:+d.IP,ER:+d.ER,HR:+d.HR,K:+d.SO,
        WHIP:+d.WHIP,H9:+d.H9,BB:+d.BB,IBB:+d.IBB,HR9:+d.HR9,BB9:+d.BB9,K9:+d.SO9,KpW:+d['SO/W']
      }
    })
    .get(function(error, rows) {
      var cumulative = JSON.parse(JSON.stringify(rows));
      var playerData = {seasonal:rows,cumulative:cumulative};
      pitchData.push(playerData);
      if (pitchData.length === 10){
        makePitchers();
      }
    })
}

var hitCompare = {career:null,seasonAvg:null};
d3.csv('hitters/hitting_comp.csv').row(function(d){
  if (d.Age == '162 Game Avg.'||(d.Age !== '' && d.Age !== '162 Game Avg.' && d.Age !== 'Age')){
    return {
        player:d.Player,year:d.Year,hits:+d.H,doubles:+d['2B'],triples:+d['3B'],RBI:+d.RBI,HR:+d.HR,runs:+d.R,
        TB:+d.TB,AB:+d.AB,slug:+d.SLG,BA:+d.BA,BB:+d.BB,IBB:+d.IBB,SB:+d.SB,CS:+d.CS,K:+d.SO,G:+d.G,OPS:+d.OPS
      }
  }
})
.get(function(error, rows){
  hitCompare.career = JSON.parse(JSON.stringify(rows)).filter(function(d){return (d.year !== '' && d.year !== '162 Game Avg.' && d.year !== 'Year')});
  hitCompare.seasonAvg = JSON.parse(JSON.stringify(rows)).filter(function(d){return d.year == '162 Game Avg.'});
  //makeHitCompare();
});

// function makeHitCompare(){
//   console.log(hitCompare);
//
//   var fields = ['HR','hits','RBI','runs'];
//   var maxes = [];
//
//   fields.forEach(function(field){
//     var max = d3.max(hitCompare.career, function(d) {
//       return d[field];
//     });
//     maxes.push(max)
//   });
//
//   var scale1 = d3.scale.linear().range([height/2,margins.top]).domain([0,maxes[0]]);
//   var scale2 = d3.scale.linear().range([width/2,width-margins.right]).domain([0,maxes[1]]);
//   var scale3 = d3.scale.linear().range([height/2,height-margins.bottom]).domain([0,maxes[2]]);
//   var scale4 = d3.scale.linear().range([width/2,margins.left]).domain([0,maxes[3]]);
//
//   //var players = //hitSvg2.selectAll('.player').data(hitCompare.career)/*.enter().append('g')*/.attr('class','player');
//   // players.append('circle').attr('r',5)
//   //   .attr('transform',function(d){
//   //     return 'translate('+(width/2)+','+scale1(d.HR)+')';
//   //   })
//   // players.append('circle').attr('r',5)
//   //   .attr('transform',function(d){
//   //     return 'translate('+(scale2(d.hits))+','+(height/2)+')';
//   //   })
//   // players.append('circle').attr('r',5)
//   //   .attr('transform',function(d){
//   //     return 'translate('+(width/2)+','+scale3(d.RBI)+')';
//   //   })
//   // players.append('circle').attr('r',5)
//   //   .attr('transform',function(d){
//   //     return 'translate('+(scale4(d.runs))+','+(height/2)+')';
//   //   })
//
// }

var pitchCompare = {career:null,seasonAvg:null};
d3.csv('pitchers/pitching_comp.csv').row(function(d){
  if (d.Age == '162 Game Avg.'||(d.Age !== '' && d.Age !== '162 Game Avg.' && d.Age !== 'Age')){
    return {
        player:d.Player,year:d.Year,wins:+d.W,losses:+d.L,ERA:+d.ERA,hits:+d.H,IP:+d.IP,ER:+d.ER,HR:+d.HR,K:+d.SO,
        WHIP:+d.WHIP,H9:+d.H9,BB:+d.BB,IBB:+d.IBB,HR9:+d.HR9,BB9:+d.BB9,K9:+d.SO9,KpW:+d['SO/W']
      }
  }
})
.get(function(error, rows){
  pitchCompare.career = JSON.parse(JSON.stringify(rows)).filter(function(d){return (d.year !== '' && d.year !== '162 Game Avg.' && d.year !== 'Year')});
  pitchCompare.seasonAvg = JSON.parse(JSON.stringify(rows)).filter(function(d){return d.year == '162 Game Avg.'});
  //make compare chart....
  //console.log(pitchCompare);
});

function makeHitters(){
  //bind data to player
  hitData.forEach(function(data){
    var guy = data.seasonal[0].player;
    data.player = guy;
    var name = guy.replace('_',' ');
    data.display = name;

    var btn = hitDiv.select('.playerList').append('div')
      .attr('class','playerBtn').attr('player',guy);
    btn.append('img').attr("src",'images/'+guy+'.png').attr('alt',guy);
    btn.append('p').text(name);
      //.style('background-image', 'url(images/'+guy+'.png)');

    var cumulative = data.cumulative;
    var hits=0,doubles=0,triples=0,RBI=0,HR=0,R=0,AB=0,TB=0,OPS=0;
    for (var b=0;b<cumulative.length;b++){
      var thisData = cumulative[b];
      //do this to preserve breaks for missed seasons; could also remove record, but would then
      //have to loop through backwards and search for nulls
      if (typeof thisData.hits !== 'number'){
        thisData.hits = 'null';
        thisData.doubles = 'null';
        thisData.triples = 'null';
        thisData.RBI = 'null';
        thisData.HR = 'null';
        thisData.runs = 'null';
        thisData.BA = 'null';
        thisData.slug = 'null';
        thisData.OPS = 'null';
        continue;
      }

      hits += thisData.hits;
      doubles += thisData.doubles;
      triples += thisData.triples;
      RBI += thisData.RBI;
      HR += thisData.HR;
      R += thisData.runs;
      AB += thisData.AB;
      TB += thisData.TB;
      OPS += thisData.OPS;
      thisData.hits = hits;
      thisData.doubles = doubles;
      thisData.triples = triples;
      thisData.RBI = RBI;
      thisData.HR = HR;
      thisData.runs = R;
      thisData.BA = (hits/AB);
      thisData.slug = (TB/AB);
      thisData.OPS = OPS/(b+1);
    }
  });

  var x = d3.scale.linear().range([margins.left,width-margins.right]);
  var xInv = d3.scale.linear().domain([margins.left,width-margins.right]);
  var y = d3.scale.linear().range([(height-margins.bottom),margins.top]);

  var players = hitSvg.selectAll('.player').data(hitData).enter().append('g').attr('class', function(d){return 'player '+d.player})
  var lines = players.append('path')
    .style('fill','none').style('stroke-width',3).style('stroke-opacity',0.5).style('stroke','green');

  var xAxis = d3.svg.axis().orient('bottom').tickFormat(d3.format('d'));
  hitSvg.append('svg:g')
    .attr('transform','translate('+0+','+(height-margins.bottom)+')')
    .attr('class','xaxis')

  var yAxis = d3.svg.axis().orient('left');
  hitSvg.append('svg:g')
    .attr('transform','translate('+margins.left+','+0+')')
    .attr('class','yaxis')

  var lineFx = d3.svg.line().interpolate('linear');

  function lineChange(field,set){
    var fieldMax = d3.max(hitData, function(d) {
      return d3.max(d[set], function(e){
        return e[field];
      });
    });
    y.domain([0,fieldMax]);
    lineFx.defined(function(d) { return d[field] >= 0; }).y(function (d) { return y(d[field]) });
    lines.transition().duration(500).attr('d', function(d){return lineFx(d[set])});
    hitDiv.select('.yaxis').transition().duration(500).call(yAxis.scale(y));
  }

  function timeChange(time){
    //check if playerbutton is clicked, could refactor into own function returning player if clicked//
    var clicked = hitDiv.select('.playerBtn.clicked');
    if (clicked[0][0] == null){
      if (time == 'career'){
        var min = 1;
        var max = d3.max(hitData, function(d){return d.seasonal.length});
        lineFx.x(function(d,i){return x(i+1)});
      }else{
        var min = d3.min(hitData, function(d) {return d.seasonal[0].year;});
        var max = d3.max(hitData, function(d) {return d.seasonal[d.seasonal.length-1].year;});
        lineFx.x(function (d) { return x(d.year) })
      }
    }else{
      //if player button is clicked, make x axis fit just that player, should do the same with y axis//
      var player = clicked.attr('player');
      var min,max;
      hitDiv.select('g.player.'+player).each(function(d){
        if (time == 'career'){
          min = 1;
          max = d.seasonal.length;
          lineFx.x(function(d,i){return x(i+1)});
        }else{
          min = d.seasonal[0].year;
          max = d.seasonal[d.seasonal.length-1].year;
          lineFx.x(function (d) { return x(d.year) })
        }
      })
    }
    x.domain([min,max]);
    xInv.range([min,max]);

    var field = hitDiv.select('#clicker').node().value;
    hitDiv.select('.xaxis').transition().duration(500).call(xAxis.scale(x));

    var set = hitDiv.select('input[name="optradio2"]:checked').node().value;

    lineChange(field,set);
  }
  timeChange('time');

  function buttonHover(player){
    hitDiv.selectAll('g.player').style('opacity',0.1);
    hitDiv.selectAll('g.player.'+player).style('opacity',1);
  }
  function chartReset(){
    hitDiv.selectAll('.playerBtn').attr('class','playerBtn');
    hitDiv.selectAll('g.player').style('opacity',1);
  }

  hitDiv.select('#clicker').on('change', function(){
    var field = d3.select(this).node().value;
    var set = hitDiv.select('input[name="optradio2"]:checked').node().value;
    lineChange(field,set);
  });

  hitDiv.selectAll('input[name="optradio1"]').on('change', function () {
      var time = d3.select(this).node().value;
      timeChange(time);
  });

  hitDiv.selectAll('input[name="optradio2"]').on('change', function () {
      var field = hitDiv.select('#clicker').node().value;
      var set = d3.select(this).node().value;
      lineChange(field,set);
  });

  hitDiv.selectAll('.playerBtn').on('mouseover', function(){
    var player = d3.select(this).attr('player');
    buttonHover(player);
  })
  .on('mousemove', function(){
    var player = d3.select(this).attr('player');
    buttonHover(player);
  })
  .on('mouseout', chartReset);

  function clickPlayer(player){
    var time  = hitDiv.select('input[name="optradio1"]:checked').node().value;
    timeChange(time)
    hitSvg
      .on('mouseover',toolHov).on('mousemove',toolHov).on('mouseout',toolUnhov);
  }
    //when you click a player, zoom the x axis to that player's career span, make it hoverable.
    //click on another player to do the same. click reset to zoom out
  function toolHov(){
    var player = hitDiv.select('.playerBtn.clicked').attr('player');
    var data = hitData.filter(function(b){return b.player == player})[0];
    var field = hitDiv.select('#clicker').node().value;
    var time = hitDiv.select('input[name="optradio1"]:checked').node().value;
    var set  = hitDiv.select('input[name="optradio2"]:checked').node().value;

    var left = d3.event.offsetX;
    var year = d3.round(xInv(left),0);
    var top = d3.event.offsetY;

    var xLeft = x(year);
    var yData = (time == 'time')?data[set].filter(function(b){return b.year == year})[0]:
    data[set][year-1];

    if (yData){
      var yTop = y(yData[field]);
      var mid = y.domain()[1]/2;
      cTop = (yData[field]>mid)?100:-100;
      //y2 = (yData[field]>mid)?100:-100;
      if (yTop){
        hitTip.style('visibility','visible')
          .attr('transform','translate('+xLeft+','+yTop+')');
        hitTip.selectAll('*').attr('transform','translate(0,'+cTop+')');
        hitTip.select('line').attr('y1',0).attr('y2',cTop*(-1))
        //hitTip.select('circle').attr('transform','translate(0,'+cTop+')');
      }
      //hitTip.select('line').attr('y1',yTop).attr('y2',y(yData[field]))
    }else{
      hitTip.style('visibility','hidden')
    }
    hitTip.select('text').text(d3.round(yData[field],3));
  }
  function toolUnhov(){
    hitTip.style('visibility','hidden');
  }

  hitDiv.selectAll('.playerBtn').on('click',function(){
    var clickedClasses = d3.select(this).attr('class').split(" ");
    //hitDiv.selectAll('g.player').on('mousemove',null).on('mouseover',null).on('mouseout',null);
    hitSvg.on('mousemove',null).on('mouseover',null).on('mouseout',null);
    if (clickedClasses.indexOf('clicked') !== -1){
      hitDiv.selectAll('.playerBtn').attr('class','playerBtn')
        .on('mouseover', function(){
          var player = d3.select(this).attr('player');
          buttonHover(player);
        })
        .on('mousemove', function(){
          var player = d3.select(this).attr('player');
          buttonHover(player);
        })
        .on('mouseout', chartReset);
        hitTip.style('visibility','hidden');
        var time  = hitDiv.select('input[name="optradio1"]:checked').node().value;
        timeChange(time);
    }else{
      hitDiv.selectAll('.playerBtn').attr('class','playerBtn');
      d3.select(this).attr('class','playerBtn clicked');
      hitDiv.selectAll('.playerBtn').on('mousemove',null).on('mouseover',null).on('mouseout',null);
      var player = d3.select(this).attr('player');
      hitTip.style('visibility','hidden');
      buttonHover(player);
      clickPlayer(player);
    }
  });

}

function makePitchers(){
  //bind data to player
  pitchData.forEach(function(data){
    var guy = data.seasonal[0].player;
    data.player = guy;
    var name = guy.split('_').join(' ');
    data.display = name;

    // pitchDiv.select('.playerList').append('div')
    //   .attr('class','playerBtn').attr('player',guy)
    //   .style('background-image', 'url(images/'+guy+'.png)');

    var btn = pitchDiv.select('.playerList').append('div')
      .attr('class','playerBtn').attr('player',guy);
    btn.append('img').attr("src",'images/'+guy+'.png').attr('alt',guy);
    btn.append('p').text(name);

    var cumulative = data.cumulative;
    var hits=0,wins=0,losses=0,K=0,HR=0,ER=0,BB=0,IP=0;
    for (var b=0;b<cumulative.length;b++){
      var thisData = cumulative[b];
      hits += thisData.hits;
      wins += thisData.wins;
      losses += thisData.losses;
      K += thisData.K;
      HR += thisData.HR;
      ER += thisData.ER;
      BB += thisData.BB;
      IP += thisData.IP;
      thisData.hits = hits;
      thisData.wins = wins;
      thisData.losses = losses;
      thisData.K = K;
      thisData.HR = HR;
      thisData.ER = ER;
      thisData.BB = BB;
      thisData.ERA = 9*(ER/IP);
      thisData.WHIP = (BB+hits)/IP;
    }
  });

  var x = d3.scale.linear().range([margins.left,width-margins.right]);
  var xInv = d3.scale.linear().domain([margins.left,width-margins.right]);
  var y = d3.scale.linear().range([(height-margins.bottom),margins.top]);

  var players = pitchSvg.selectAll('.player').data(pitchData).enter()
      .append('g').attr('class', function(d){return 'player '+d.player})
  var lines = players.append('path')
    .style('fill','none').style('stroke-width',3).style('stroke-opacity',0.5).style('stroke','green');

  var xAxis = d3.svg.axis().orient('bottom').tickFormat(d3.format('d'));
  pitchSvg.append('svg:g')
    .attr('transform','translate('+0+','+(height-margins.bottom)+')')
    .attr('class','xaxis')

  var yAxis = d3.svg.axis().orient('left');
  pitchSvg.append('svg:g')
    .attr('transform','translate('+margins.left+','+0+')')
    .attr('class','yaxis')

  var lineFx = d3.svg.line().interpolate('linear');

  function lineChange(field,set){
    var fieldMax = d3.max(pitchData, function(d) {
      return d3.max(d[set], function(e){
        return e[field];
      });
    });
    y.domain([0,fieldMax]);
    lineFx.defined(function(d) { return d[field] >= 0; }).y(function (d) { return y(d[field]) });
    lines.transition().duration(500).attr('d', function(d){return lineFx(d[set])});
    pitchDiv.select('.yaxis').transition().duration(500).call(yAxis.scale(y));
  }

  function timeChange(time){
    var clicked = pitchDiv.select('.playerBtn.clicked');
    if (clicked[0][0] == null){
      if (time == 'career'){
        var min = 1;
        var max = d3.max(pitchData, function(d){return d.seasonal.length});
        lineFx.x(function(d,i){return x(i+1)});
      }else{
        var min = d3.min(pitchData, function(d) {return d.seasonal[0].year;});
        var max = d3.max(pitchData, function(d) {return d.seasonal[d.seasonal.length-1].year;});
        lineFx.x(function (d) { return x(d.year) })
      }
    }else{
      //if player button is clicked, make x axis fit just that player, should do the same with y axis//
      var player = clicked.attr('player');
      var min,max;
      pitchDiv.select('g.player.'+player).each(function(d){
        if (time == 'career'){
          min = 1;
          max = d.seasonal.length;
          lineFx.x(function(d,i){return x(i+1)});
        }else{
          min = d.seasonal[0].year;
          max = d.seasonal[d.seasonal.length-1].year;
          lineFx.x(function (d) { return x(d.year) })
        }
      })
    }

    x.domain([min,max]);
    xInv.range([min,max]);

    var field = pitchDiv.select('#clicker').node().value;
    pitchDiv.select('.xaxis').transition().duration(500).call(xAxis.scale(x));

    var set = pitchDiv.select('input[name="optradio4"]:checked').node().value;

    lineChange(field,set);
  }
  timeChange('time');

  function buttonHover(player){
    pitchDiv.selectAll('g.player').style('opacity',0.1);
    pitchDiv.selectAll('g.player.'+player).style('opacity',1);
  }
  function chartReset(){
    pitchDiv.selectAll('.playerBtn').attr('class','playerBtn');
    pitchDiv.selectAll('g.player').style('opacity',1);
  }

  pitchDiv.select('#clicker').on('change', function(){
    var field = d3.select(this).node().value;
    var set = pitchDiv.select('input[name="optradio4"]:checked').node().value;
    lineChange(field,set);
  });

  pitchDiv.selectAll('input[name="optradio3"]').on('change', function () {
      var time = d3.select(this).node().value;
      timeChange(time);
  });

  pitchDiv.selectAll('input[name="optradio4"]').on('change', function () {
      var field = pitchDiv.select('#clicker').node().value;
      var set = d3.select(this).node().value;
      lineChange(field,set);
  });

  pitchDiv.selectAll('.playerBtn').on('mouseover', function(){
    var player = d3.select(this).attr('player');
    buttonHover(player)
  })
  .on('mousemove', function(){
    var player = d3.select(this).attr('player');
    buttonHover(player)
  })
  .on('mouseout', chartReset);

  function clickPlayer(player){
    var time  = pitchDiv.select('input[name="optradio3"]:checked').node().value;
    timeChange(time)
    pitchSvg
      .on('mouseover',toolHov).on('mousemove',toolHov).on('mouseout',toolUnhov);
  }
    //when you click a player, zoom the x axis to that player's career span, make it hoverable.
    //click on another player to do the same. click reset to zoom out
  function toolHov(){
    var player = pitchDiv.select('.playerBtn.clicked').attr('player');
    var data = pitchData.filter(function(b){return b.player == player})[0];
    var field = pitchDiv.select('#clicker').node().value;
    var time = pitchDiv.select('input[name="optradio3"]:checked').node().value;
    var set  = pitchDiv.select('input[name="optradio4"]:checked').node().value;

    var left = d3.event.offsetX;
    var year = d3.round(xInv(left),0);
    var top = d3.event.offsetY;

    var xLeft = x(year);
    var yData = (time == 'time')?data[set].filter(function(b){return b.year == year})[0]:
    data[set][year-1];

    if (yData){
      var yTop = y(yData[field]);
      pitchTip.style('visibility','visible')
        .attr('transform','translate('+xLeft+','+yTop+')');
    }else{
      pitchTip.style('visibility','hidden')
    }
  }
  function toolUnhov(){
    pitchTip.style('visibility','hidden');
  }

  pitchDiv.selectAll('.playerBtn').on('click',function(){
    var clickedClasses = d3.select(this).attr('class').split(" ");
    pitchDiv.selectAll('g.player').on('mousemove',null).on('mouseover',null).on('mouseout',null);
    if (clickedClasses.indexOf('clicked') !== -1){
      pitchDiv.selectAll('.playerBtn').attr('class','playerBtn')
        .on('mouseover', function(){
          var player = d3.select(this).attr('player');
          buttonHover(player);
        })
        .on('mousemove', function(){
          var player = d3.select(this).attr('player');
          buttonHover(player);
        })
        .on('mouseout', chartReset);
        pitchTip.style('visibility','hidden');
        var time  = pitchDiv.select('input[name="optradio3"]:checked').node().value;
        timeChange(time);
    }else{
      pitchDiv.selectAll('.playerBtn').attr('class','playerBtn');
      d3.select(this).attr('class','playerBtn clicked');
      pitchDiv.selectAll('.playerBtn').on('mousemove',null).on('mouseover',null).on('mouseout',null);
      var player = d3.select(this).attr('player');
      pitchTip.style('visibility','hidden');
      buttonHover(player);
      clickPlayer(player);
    }
  });

}

});
